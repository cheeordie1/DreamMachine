package assignment;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.sql.*;


public class Quiz {
	// instance variables
	public ErrorMessages errors;
	public ArrayList<Question> questions;
	
	// database variables
	public int quiz_id;
	public int user_id; 
	public String name;
	public String description;
	public boolean single_page;
	public boolean random_questions;
	public boolean immediate_correct;
	public boolean practice_mode;
	public Date created_at;

	// static variables
	public static String TABLE_NAME = "quizzes";

	// error types
	public static String NAME_ERROR = "name";
	public static String DESCRIPTION_ERROR = "description";
	
	// error messages
	public static String NAME_EMPTY = "Name cannot be empty.";
	public static String DESCRIPTION_EMPTY = "Description cannot be empty.";
	
	/*
	 * Constructor for making a quiz on website
	 */
	public Quiz () {
		questions = new ArrayList<Question>();
		errors = new ErrorMessages();
	}
	
	/**
	 * Constructor for uploading quiz from database 
	 */
	public Quiz (ResultSet quizData) {
		questions = new ArrayList<Question>();
		try {
			quiz_id = quizData.getInt("quiz_id"); 
			name = quizData.getString("name");
			description = quizData.getString("description");
			user_id = quizData.getInt("user_id");
			single_page = quizData.getBoolean("single_page");
			random_questions = quizData.getBoolean("random_questions");
			practice_mode = quizData.getBoolean("practice_mode");
			created_at = quizData.getDate("created_at");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Insert the quiz into the quizzes table and assign the 
	 * quiz_id instance variable to the unique id generated by 
	 * adding the quiz to the table.
	 */
	public boolean save() {
		boolean errors = false;
		if (nameEmpty()) errors = true;
		if (descriptionEmpty()) errors = true;
		if (errors) return false;
		String update = "INSERT INTO " + TABLE_NAME + "(user_id, name, description," + 
		                "single_page, random_questions, " +
				        "immediate_correct, practice_mode) VALUES(?,?,?,?,?,?,?)";
		PreparedStatement stmt = DBConnection.beginStatement(update);
		try {
			stmt.setInt(1, user_id);
			stmt.setString(2, name);
			stmt.setString(3, description);
			stmt.setBoolean(4, single_page);
			stmt.setBoolean(5, random_questions);
			stmt.setBoolean(6, immediate_correct);
			stmt.setBoolean(7, practice_mode);
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			return false;
		}
		quiz_id = DBConnection.update(stmt);
		if (quiz_id == 0) return false;
		return true; 
	}
	
	/**
	 * Update will change a db entry for a given quiz if the quiz
	 * has proper format and filled fields.
	 */
	public boolean update() {
		return false;
	}
	
	/**
	 * Delete will delete a db entry from the table by searching for
	 * its unique primary key quiz_id.
	 */
	public boolean delete() {
        if (quiz_id == 0) return false;
        String update = "DELETE FROM " + TABLE_NAME + 
                        " WHERE quiz_id = " + quiz_id + " LIMIT 1";
        DBConnection.update(update);
        return true;
	}
	
	/**
	 * Returns whether the given String parameter is empty.
	 * @param checkEmpty the String to check for emptiness
	 * @return true if String is empty, false otherwise
	 */
	private boolean isEmpty(String checkEmpty) {
		if (checkEmpty == null || checkEmpty.isEmpty() || 
			checkEmpty.matches("\\s*")) return true;
		return false;
	}
	
	/**
	 * Search for a quiz by its unique quiz_id
	 * @param quiz_id the id to search by
	 * @return the list of quizzes with the same id
	 */
	public static List<Quiz> searchByID(int quiz_id) {
		List<Quiz> quizzes = new ArrayList<Quiz>();
		String query = "SELECT * FROM " + TABLE_NAME + " WHERE quiz_id = " + quiz_id;
		ResultSet rs = DBConnection.query(query);
		if (rs == null) return quizzes;
		try {
			while (rs.next())
				quizzes.add(new Quiz(rs));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return quizzes;
	}
	
	/**
	 * Search for a quiz by its owner's user id
	 * @param user_id of the owner of the quiz
	 * @return the list of quizzes with the same user_id
	 */
	public static List<Quiz> searchByUserID(int user_id) {
		List<Quiz> quizzes = new ArrayList<Quiz>();
		String query = "SELECT * FROM " + TABLE_NAME + " WHERE user_id = " + user_id;
		ResultSet rs = DBConnection.query(query);
		if (rs == null) return quizzes;
		try {
			while (rs.next())
				quizzes.add(new Quiz(rs));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return quizzes;
	}
	
	/**
	 * This function loads all of the questions into the Quiz object
	 * from the database.
	 */
	public void loadQuestions() {
		String query = "SELECT * FROM questions WHERE quiz_id= " + quiz_id;
		ResultSet rs = DBConnection.query(query);
		if (rs == null) return;
		try {
			while (rs.next()){
				Question singleQuestion = new Question(rs);
				questions.add(singleQuestion);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Returns whether the name field is empty. It must contain a
	 * non whitespace character.
	 */
	public boolean nameEmpty() {
		if (isEmpty(name)) {
			errors.addError(NAME_ERROR, NAME_EMPTY);
			return true;
		}
		return false;
	}
	
	/**
	 * Returns whether the description field is empty. It must contain a
	 * non whitespace character.
	 */
	public boolean descriptionEmpty() {
		if (isEmpty(description)) {
			errors.addError(DESCRIPTION_ERROR, DESCRIPTION_EMPTY);
			return true;
		}
		return false;
	}
	
	public static List<Quiz> searchBySubstring(String quizSub) {
    	List<Quiz> quizzes = new ArrayList<Quiz>();
    	String query = "SELECT * FROM " + TABLE_NAME + 
    	               " WHERE name LIKE " + "'%" + quizSub + "%'";
    	ResultSet rs = DBConnection.query(query);
    	if (rs == null) return quizzes;
    	try {
			while (rs.next())
				quizzes.add(new Quiz(rs));
		} catch (SQLException e) {
			e.printStackTrace();
		}
    	return quizzes;
    }	
}