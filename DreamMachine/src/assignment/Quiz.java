package assignment;

import java.util.Date;
import java.sql.*;


public class Quiz {
	// instance variables
	ErrorMessages errors;
	
	// database variables
	public int quiz_id;
	public int user_id; 
	public String name;
	public String description;
	public boolean single_page;
	public boolean random_questions;
	public boolean immediate_correct;
	public boolean practice_mode;
	public Date created_at;

	// static variables
	public static String TABLE_NAME = "quizzes";

	// error types
	public static String NAME_ERROR = "name";
	public static String DESCRIPTION_ERROR = "description";
	
	// error messages
	public static String NAME_EMPTY = "Name cannot be empty.";
	public static String DESCRIPTION_EMPTY = "Description cannot be empty.";
	
	/*
	 * Constructor for making a quiz on website
	 */
	public Quiz () {
		errors = new ErrorMessages();
	}
	
	/**
	 * Constructor for uploading quiz from database 
	 */
	public Quiz (ResultSet quizData) {
		try {
			quiz_id = quizData.getInt("quiz_id"); 
			name = quizData.getString("name");
			description = quizData.getString("description");
			user_id = quizData.getInt("user_id");
			single_page = quizData.getBoolean("single_page");
			random_questions = quizData.getBoolean("random_questions");
			practice_mode = quizData.getBoolean("practice_mode");
			created_at = quizData.getDate("date");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Insert the quiz into the quizzes table and assign the 
	 * quiz_id instance variable to the unique id generated by 
	 * adding the quiz to the table.
	 */
	public boolean save() {
		boolean errors = false;
		if (nameEmpty()) errors = true;
		if (descriptionEmpty()) errors = true;
		if (errors) return false;
		String update = "INSERT INTO " + TABLE_NAME + "(user_id, name, description," + 
		                "single_page, random_questions, practice_mode," +
				        "immediateCorrect) VALUES(" + user_id + "," + name + 
				        "," + description + "," + single_page + "," + 
				        random_questions + "," + practice_mode + "," +
				        immediate_correct + ")";
		this.quiz_id = DBConnection.update(update);
		return !errors; 
	}
	
	/**
	 * Update will change a db entry for a given quiz if the quiz
	 * has proper format and filled fields.
	 */
	public boolean update() {
		return false;
	}
	
	/**
	 * Delete will delete a db entry from the table by searching for
	 * its unique primary key quiz_id.
	 */
	public boolean delete() {
        if (quiz_id == 0) return false;
        String update = "DELETE FROM " + TABLE_NAME + 
                        " WHERE quiz_id = " + quiz_id + " LIMIT 1";
        DBConnection.update(update);
        return true;
	}
	
	/**
	 * Returns whether the given String parameter is empty.
	 * @param checkEmpty the String to check for emptiness
	 * @return true if String is empty, false otherwise
	 */
	private boolean isEmpty(String checkEmpty) {
		if (checkEmpty == null || checkEmpty.isEmpty() || 
			!checkEmpty.matches("\\S+")) return true;
		return false;
	}
	
	/**
	 * Returns whether the name field is empty. It must contain a
	 * non whitespace character.
	 */
	public boolean nameEmpty() {
		if (isEmpty(name)) {
			errors.addError(NAME_ERROR, NAME_EMPTY);
			return true;
		}
		return false;
	}
	
	/**
	 * Returns whether the description field is empty. It must contain a
	 * non whitespace character.
	 */
	public boolean descriptionEmpty() {
		if (isEmpty(description)) {
			errors.addError(DESCRIPTION_ERROR, DESCRIPTION_EMPTY);
			return true;
		}
		return false;
	}
}
